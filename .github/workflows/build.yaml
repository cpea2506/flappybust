name: build

on:
  push:

env:
  BINARY: flappybust
  PUBLIC_URL: /flappybust/

jobs:
  release-wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
      - name: Install trunk
        uses: jetli/trunk-action@v0.2.0
        with:
          version: "latest"
      - name: Trunk build
        run: trunk build --release --public-url ${{ env.PUBLIC_URL }}
      - name: deploy to Github Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./wasm/dist/

  # Build for Linux
  release-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: x86_64-unknown-linux-gnu
          override: true
      - name: install dependencies
        run: |
          sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
      - name: Build
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
      - name: Prepare package
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ env.BINARY }} linux/
          cp -r assets linux/
      - name: Package as a zip
        working-directory: ./linux
        run: |
          zip --recurse-paths ../${{ env.BINARY }}.zip .
      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.BINARY }}.zip
          name: linux

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.BINARY }}.zip
          asset_name: ${{ env.BINARY }}-linux-${{ steps.get_version.outputs.tag }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for Windows
  release-windows:
    runs-on: windows-latest

    steps:
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: x86_64-pc-windows-msvc
          override: true

      - name: Build
        run: |
          cargo build --release --target x86_64-pc-windows-msvc
      - name: Prepare package
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ env.BINARY }}.exe windows/
          cp -r assets windows/
      - name: Package as a zip
        run: |
          Compress-Archive -Path windows/* -DestinationPath ${{ env.BINARY }}.zip
      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.BINARY }}.zip
          name: windows

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.BINARY }}.zip
          asset_name: ${{ env.BINARY }}-windows-${{ steps.get_version.outputs.tag }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for macOS
  release-macos:
    runs-on: macos-latest

    steps:
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Environment Setup
        run: |
          export CFLAGS="-fno-stack-check"
          export MACOSX_DEPLOYMENT_TARGET="10.9"
      - name: Build
        run: |
          cargo build --release
      - name: Prepare Package
        run: |
          mkdir -p ${{ env.BINARY }}.app/Contents/MacOS
          cp target/release/${{ env.BINARY }} ${{ env.BINARY }}.app/Contents/MacOS/
          cp -r assets ${{ env.BINARY }}.app/Contents/MacOS/
          hdiutil create -fs HFS+ -volname "${{ env.BINARY }}" -srcfolder ${{ env.BINARY }}.app ${{ env.BINARY }}.dmg
      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.BINARY }}.dmg
          name: mac

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.BINARY }}.dmg
          asset_name: ${{ env.BINARY }}-macos-${{ steps.get_version.outputs.tag }}.dmg
          tag: ${{ github.ref }}
          overwrite: true
